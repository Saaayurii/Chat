import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { OperatorRating, OperatorRatingDocument } from '../schemas/operator-rating.schema';
import { User, UserDocument, UserRole } from '../schemas/user.schema';

@Injectable()
export class RatingsSeeder {
  constructor(
    @InjectModel(OperatorRating.name) private ratingModel: Model<OperatorRatingDocument>,
    @InjectModel(User.name) private userModel: Model<UserDocument>,
  ) {}

  async seed() {
    console.log('üå± Seeding operator ratings...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
    const existingRatingsCount = await this.ratingModel.countDocuments();
    if (existingRatingsCount > 0) {
      console.log('‚≠ê Ratings already exist, skipping ratings seeding');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const visitors = await this.userModel.find({ role: UserRole.VISITOR }).limit(10);
    const operators = await this.userModel.find({ role: UserRole.OPERATOR });
    const admins = await this.userModel.find({ role: UserRole.ADMIN });

    if (visitors.length === 0 || operators.length === 0) {
      console.log('‚ö†Ô∏è  No users found, skipping ratings seeding');
      return;
    }

    const positiveComments = [
      '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ë—ã—Å—Ç—Ä–æ —Ä–µ—à–∏–ª –º–æ—é –ø—Ä–æ–±–ª–µ–º—É.',
      '–û—á–µ–Ω—å –≤–µ–∂–ª–∏–≤—ã–π –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.',
      '–ü–æ–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –∑–∞ 5 –º–∏–Ω—É—Ç.',
      '–¢–µ—Ä–ø–µ–ª–∏–≤–æ –æ–±—ä—è—Å–Ω–∏–ª –≤—Å–µ –¥–µ—Ç–∞–ª–∏.',
      '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞.',
      '–ë—ã—Å—Ç—Ä—ã–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å.',
      '–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–Ω–∞–µ—Ç —Å–≤–æ–µ –¥–µ–ª–æ!',
      '–†–µ—à–∏–ª –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ –º–æ–≥–ª–∏ —Ä–µ—à–∏—Ç—å –¥—Ä—É–≥–∏–µ.',
      '–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º.',
      '–†–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!'
    ];

    const neutralComments = [
      '–í–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω, –Ω–æ –ø—Ä–∏—à–ª–æ—Å—å –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å.',
      '–í —Ü–µ–ª–æ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –º–æ–≥–ª–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ.',
      '–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ.',
      '–û–±—ã—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.',
      '–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç, –ø—Ä–µ—Ç–µ–Ω–∑–∏–π –Ω–µ—Ç.'
    ];

    const negativeComments = [
      '–û—á–µ–Ω—å –¥–æ–ª–≥–æ –∂–¥–∞–ª –æ—Ç–≤–µ—Ç–∞.',
      '–û–ø–µ—Ä–∞—Ç–æ—Ä –±—ã–ª –Ω–µ –æ—á–µ–Ω—å –≤–µ–∂–ª–∏–≤.',
      '–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é.',
      '–ü—Ä–∏—à–ª–æ—Å—å –æ–±—ä—è—Å–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.',
      '–ù–∞–¥–µ—è–ª—Å—è –Ω–∞ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ.'
    ];

    const ratings: any[] = [];

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    for (const operator of operators) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 15-25 —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
      const ratingsCount = Math.floor(Math.random() * 11) + 15; // 15-25 —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
      
      for (let i = 0; i < ratingsCount; i++) {
        const rating = Math.floor(Math.random() * 5) + 1; // 1-5 –∑–≤–µ–∑–¥
        let comment = '';
        let isHidden = false;
        let hiddenBy: any = undefined;
        let hiddenAt: any = undefined;
        let hideReason: any = undefined;

        // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
        if (rating >= 4) {
          comment = positiveComments[Math.floor(Math.random() * positiveComments.length)];
        } else if (rating === 3) {
          comment = neutralComments[Math.floor(Math.random() * neutralComments.length)];
        } else {
          comment = negativeComments[Math.floor(Math.random() * negativeComments.length)];
          
          // –ò–Ω–æ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
          if (Math.random() < 0.1) {
            isHidden = true;
            hiddenBy = admins[Math.floor(Math.random() * admins.length)]?._id;
            hiddenAt = new Date(Date.now() - Math.floor(Math.random() * 86400000)); // –¥–æ 1 –¥–Ω—è –Ω–∞–∑–∞–¥
            hideReason = '–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞';
          }
        }

        const createdAt = new Date(Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000)); // –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π

        ratings.push({
          operatorId: operator._id,
          userId: visitors[Math.floor(Math.random() * visitors.length)]._id,
          rating,
          comment,
          isHidden,
          hiddenBy,
          hiddenAt,
          hideReason,
          createdAt,
        });
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    const specialRatings = [
      // –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –ú–∞—Ä–∏–∏ (operator1)
      {
        operatorId: operators[0]?._id,
        userId: visitors[0]?._id,
        rating: 5,
        comment: '–ú–∞—Ä–∏—è –ø–æ—Ç—Ä—è—Å–∞—é—â–∞—è! –†–µ—à–∏–ª–∞ –º–æ—é –ø—Ä–æ–±–ª–µ–º—É –∑–∞ 2 –º–∏–Ω—É—Ç—ã. –û—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!',
        isHidden: false,
        createdAt: new Date(Date.now() - 86400000), // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
      },
      {
        operatorId: operators[0]?._id,
        userId: visitors[1]?._id,
        rating: 5,
        comment: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞. –¢–µ—Ä–ø–µ–ª–∏–≤–æ –æ–±—ä—è—Å–Ω–∏–ª–∞ –≤—Å–µ –Ω—é–∞–Ω—Å—ã.',
        isHidden: false,
        createdAt: new Date(Date.now() - 172800000), // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
      },

      // –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –î–µ–Ω–∏—Å–∞ (operator2)
      {
        operatorId: operators[1]?._id,
        userId: visitors[2]?._id,
        rating: 5,
        comment: '–î–µ–Ω–∏—Å –∑–Ω–∞–µ—Ç –≤—Å–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö! –ü–æ–º–æ–≥ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π API.',
        isHidden: false,
        createdAt: new Date(Date.now() - 259200000), // 3 –¥–Ω—è –Ω–∞–∑–∞–¥
      },

      // –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –ê–Ω–Ω—ã (operator3)
      {
        operatorId: operators[2]?._id,
        userId: visitors[3]?._id,
        rating: 3,
        comment: '–ê–Ω–Ω–∞ –ø–æ–º–æ–≥–ª–∞, –Ω–æ –ø—Ä–∏—à–ª–æ—Å—å –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞.',
        isHidden: false,
        createdAt: new Date(Date.now() - 345600000), // 4 –¥–Ω—è –Ω–∞–∑–∞–¥
      },

      // –°–∫—Ä—ã—Ç—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤
      {
        operatorId: operators[1]?._id,
        userId: visitors[4]?._id,
        rating: 1,
        comment: '–≠—Ç–æ—Ç –æ—Ç–∑—ã–≤ —Å–æ–¥–µ—Ä–∂–∞–ª –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É',
        isHidden: true,
        hiddenBy: admins[0]?._id,
        hiddenAt: new Date(Date.now() - 432000000),
        hideReason: '–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è',
        createdAt: new Date(Date.now() - 518400000), // 6 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      },

      // –û—Ç–∑—ã–≤, —Å–∫—Ä—ã—Ç—ã–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
      {
        operatorId: operators[2]?._id,
        userId: visitors[0]?._id,
        rating: 2,
        comment: '–ù–µ–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
        isHidden: true,
        hiddenBy: admins[1]?._id,
        hiddenAt: new Date(Date.now() - 604800000),
        hideReason: '–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ',
        createdAt: new Date(Date.now() - 691200000), // 8 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      },

      // –û—Ç–∑—ã–≤ —Å–æ —Å–ø–∞–º-—Å–æ–¥–µ—Ä–∂–∏–º—ã–º
      {
        operatorId: operators[3]?._id,
        userId: visitors[1]?._id,
        rating: 5,
        comment: '–õ–£–ß–®–ò–ï –ö–†–ï–î–ò–¢–´ –ë–ï–ó –°–ü–†–ê–í–û–ö! –ó–í–û–ù–ò–¢–ï 8-800-XXX-XXXX',
        isHidden: true,
        hiddenBy: admins[0]?._id,
        hiddenAt: new Date(Date.now() - 777600000),
        hideReason: '–°–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞',
        createdAt: new Date(Date.now() - 864000000), // 10 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      },
    ];

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
    const allRatings = [...ratings, ...specialRatings];

    try {
      const createdRatings = await this.ratingModel.insertMany(allRatings);
      console.log(`‚úÖ Successfully created ${createdRatings.length} ratings`);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
      console.log('\nüìã Ratings by operator:');
      for (const operator of operators) {
        const operatorRatings = allRatings.filter(r => r.operatorId?.toString() === operator._id.toString());
        const visibleRatings = operatorRatings.filter(r => !r.isHidden);
        const avgRating = visibleRatings.length > 0 
          ? (visibleRatings.reduce((sum, r) => sum + r.rating, 0) / visibleRatings.length).toFixed(1)
          : '0.0';
        
        console.log(`  üë§ ${operator.profile.fullName}: ${visibleRatings.length} –æ—Ç–∑—ã–≤–æ–≤, —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${avgRating}‚≠ê`);
      }
      
      console.log('\nüìä Overall statistics:');
      const visibleRatings = allRatings.filter(r => !r.isHidden);
      const hiddenRatings = allRatings.filter(r => r.isHidden);
      
      console.log(`  üëÅÔ∏è  Visible ratings: ${visibleRatings.length}`);
      console.log(`  üôà Hidden ratings: ${hiddenRatings.length}`);
      
      const ratingDistribution = {
        5: visibleRatings.filter(r => r.rating === 5).length,
        4: visibleRatings.filter(r => r.rating === 4).length,
        3: visibleRatings.filter(r => r.rating === 3).length,
        2: visibleRatings.filter(r => r.rating === 2).length,
        1: visibleRatings.filter(r => r.rating === 1).length,
      };
      
      console.log('  ‚≠ê Rating distribution:');
      Object.entries(ratingDistribution).reverse().forEach(([stars, count]) => {
        console.log(`    ${stars}‚≠ê: ${count} –æ—Ç–∑—ã–≤–æ–≤`);
      });
      
      const overallAvg = visibleRatings.length > 0 
        ? (visibleRatings.reduce((sum, r) => sum + r.rating, 0) / visibleRatings.length).toFixed(2)
        : '0.00';
      console.log(`  üìà Overall average: ${overallAvg}‚≠ê`);
      
    } catch (error) {
      console.error('‚ùå Error seeding ratings:', error);
      throw error;
    }
  }

  async clear() {
    console.log('üßπ Clearing ratings collection...');
    await this.ratingModel.deleteMany({});
    console.log('‚úÖ Ratings collection cleared');
  }
}