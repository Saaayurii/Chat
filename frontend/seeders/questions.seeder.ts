import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import {
  Question,
  QuestionDocument,
  QuestionStatus,
  QuestionPriority,
  QuestionCategory,
} from '../schemas/question.schema';
import { User, UserDocument, UserRole } from '../schemas/user.schema';

@Injectable()
export class QuestionsSeeder {
  constructor(
    @InjectModel(Question.name)
    private questionModel: Model<QuestionDocument>,
    @InjectModel(User.name)
    private userModel: Model<UserDocument>,
  ) {}

  async seed() {
    console.log('üå± Seeding questions...');

    const existingQuestionsCount = await this.questionModel.countDocuments();
    if (existingQuestionsCount > 0) {
      console.log('‚ùì Questions already exist, skipping questions seeding');
      return;
    }

    const visitors = await this.userModel
      .find({ role: UserRole.VISITOR })
      .limit(10);
    const operators = await this.userModel.find({ role: UserRole.OPERATOR });
    const admins = await this.userModel.find({ role: UserRole.ADMIN });
    if (visitors.length < 5 || operators.length < 4 || admins.length < 1) {
      console.error(
        `‚ùå Not enough users to seed questions.\nFound: ${visitors.length} visitors, ${operators.length} operators, ${admins.length} admins`,
      );
      return;
    }
    if (visitors.length === 0 || operators.length === 0) {
      console.log('‚ö†Ô∏è  No users found, skipping questions seeding');
      return;
    }

    const questions = [
      {
        text: '–ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –í–≤–æ–∂—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ". –ß—Ç–æ –¥–µ–ª–∞—Ç—å?',
        category: QuestionCategory.TECHNICAL,
        priority: QuestionPriority.HIGH,
        status: QuestionStatus.OPEN,
        visitorId: visitors[0].id,
        createdAt: new Date(Date.now() - 1800000),
      },
      {
        text: '–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã? –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è 50+ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.',
        category: QuestionCategory.BILLING,
        priority: QuestionPriority.NORMAL,
        status: QuestionStatus.OPEN,
        visitorId: visitors[1].id,
        createdAt: new Date(Date.now() - 3600000),
      },
      {
        text: '–°—Ä–æ—á–Ω–æ! –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–≤–∏—Å. –£ –Ω–∞—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è! –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —É–∂–µ 2 —á–∞—Å–∞. –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –º–æ–≥—É—Ç –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã.',
        category: QuestionCategory.TECHNICAL,
        priority: QuestionPriority.URGENT,
        status: QuestionStatus.OPEN,
        visitorId: visitors[2].id,
        createdAt: new Date(Date.now() - 600000),
      },
      {
        text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤. –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª–µ–µ 10 –ú–ë –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞.',
        category: QuestionCategory.TECHNICAL,
        priority: QuestionPriority.NORMAL,
        status: QuestionStatus.ASSIGNED,
        visitorId: visitors[3].id,
        operatorId: operators[0].id,
        assignedAt: new Date(Date.now() - 1200000),
        createdAt: new Date(Date.now() - 7200000),
      },
      {
        text: '–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? –ü–æ–º–µ–Ω—è–ª—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ email.',
        category: QuestionCategory.GENERAL,
        priority: QuestionPriority.LOW,
        status: QuestionStatus.ASSIGNED,
        visitorId: visitors[4].id,
        operatorId: operators[1].id,
        assignedAt: new Date(Date.now() - 900000),
        createdAt: new Date(Date.now() - 10800000),
      },
      {
        text: '–° –∫–∞—Ä—Ç—ã —Å–ø–∏—Å–∞–ª–∞—Å—å —Å—É–º–º–∞, –Ω–æ —É—Å–ª—É–≥–∞ –Ω–µ –±—ã–ª–∞ –æ–∫–∞–∑–∞–Ω–∞.',
        category: QuestionCategory.BILLING,
        priority: QuestionPriority.HIGH,
        status: QuestionStatus.IN_PROGRESS,
        visitorId: visitors[0].id,
        operatorId: operators[2].id,
        assignedAt: new Date(Date.now() - 2700000),
        createdAt: new Date(Date.now() - 14400000),
      },
      {
        text: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º API. –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ö–æ—Ç–∏–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤–∞—à–∏–º API.',
        category: QuestionCategory.TECHNICAL,
        priority: QuestionPriority.NORMAL,
        status: QuestionStatus.IN_PROGRESS,
        visitorId: visitors[1].id,
        operatorId: operators[3].id,
        assignedAt: new Date(Date.now() - 1800000),
        createdAt: new Date(Date.now() - 18000000),
      },
      {
        text: '–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å? –ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å –æ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.',
        category: QuestionCategory.GENERAL,
        priority: QuestionPriority.NORMAL,
        status: QuestionStatus.ANSWERED,
        visitorId: visitors[2].id,
        operatorId: operators[0].id,
        assignedAt: new Date(Date.now() - 86400000),
        createdAt: new Date(Date.now() - 90000000),
      },
      {
        text: '–ö–∞–∫–∏–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—ã –ø—Ä–∏–º–µ–Ω—è–µ—Ç–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?',
        category: QuestionCategory.GENERAL,
        priority: QuestionPriority.NORMAL,
        status: QuestionStatus.ANSWERED,
        visitorId: visitors[3].id,
        operatorId: operators[1].id,
        assignedAt: new Date(Date.now() - 172800000),
        createdAt: new Date(Date.now() - 176400000),
      },
      {
        text: '–ö–∞–∫ –æ—Ç–∫–ª—é—á–∏—Ç—å SMS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å email?',
        category: QuestionCategory.GENERAL,
        priority: QuestionPriority.LOW,
        status: QuestionStatus.CLOSED,
        visitorId: visitors[4].id,
        operatorId: operators[2].id,
        assignedAt: new Date(Date.now() - 259200000),
        createdAt: new Date(Date.now() - 262800000),
      },
      {
        text: '–û—à–∏–±–æ—á–Ω–æ –æ–ø–ª–∞—Ç–∏–ª –Ω–µ —Ç–æ—Ç —Ç–∞—Ä–∏—Ñ. –í–æ–∑–º–æ–∂–µ–Ω –ª–∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤?',
        category: QuestionCategory.BILLING,
        priority: QuestionPriority.NORMAL,
        status: QuestionStatus.CLOSED,
        visitorId: visitors[0].id,
        operatorId: operators[3].id,
        assignedAt: new Date(Date.now() - 432000000),
        createdAt: new Date(Date.now() - 435600000),
      },
      {
        text: '–ü—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∞—à–∏–º API –ø–æ–ª—É—á–∞—é –æ—à–∏–±–∫—É 500. –í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –Ω–µ—Ç.',
        category: QuestionCategory.TECHNICAL,
        priority: QuestionPriority.HIGH,
        status: QuestionStatus.TRANSFERRED,
        visitorId: visitors[1].id,
        operatorId: operators[3].id,
        assignedAt: new Date(Date.now() - 7200000),
        createdAt: new Date(Date.now() - 21600000),
      },
      {
        text: '–û–ø–µ—Ä–∞—Ç–æ—Ä –±—ã–ª –Ω–µ–≤–µ–∂–ª–∏–≤ –∏ –Ω–µ —Å–º–æ–≥ —Ä–µ—à–∏—Ç—å –º–æ–π –≤–æ–ø—Ä–æ—Å. –¢—Ä–µ–±—É—é —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.',
        category: QuestionCategory.COMPLAINT,
        priority: QuestionPriority.HIGH,
        status: QuestionStatus.ASSIGNED,
        visitorId: visitors[2].id,
        operatorId: admins[0].id,
        assignedAt: new Date(Date.now() - 3600000),
        createdAt: new Date(Date.now() - 5400000),
      },
      ...Array.from({ length: 5 }, (_, i) => ({
        text: `–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ${i + 1}. –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.`,
        category: [
          QuestionCategory.GENERAL,
          QuestionCategory.TECHNICAL,
          QuestionCategory.BILLING,
        ][i % 3],
        priority: [
          QuestionPriority.LOW,
          QuestionPriority.NORMAL,
          QuestionPriority.HIGH,
        ][i % 3],
        status: [
          QuestionStatus.CLOSED,
          QuestionStatus.ANSWERED,
          QuestionStatus.OPEN,
        ][i % 3],
        visitorId: visitors[i % visitors.length].id,
        operatorId: operators[i % operators.length].id,
        assignedAt: new Date(Date.now() - 86400000 * (i + 1)),
        createdAt: new Date(Date.now() - 86400000 * (i + 2)),
      })),
    ];

    try {
      const created = await this.questionModel.insertMany(questions);
      console.log(`‚úÖ Successfully inserted ${created.length} questions`);
    } catch (error) {
      console.error('‚ùå Error seeding questions:', error);
      throw error;
    }
  }

  async clear() {
    console.log('üßπ Clearing questions collection...');
    await this.questionModel.deleteMany({});
    console.log('‚úÖ Questions collection cleared');
  }
}
