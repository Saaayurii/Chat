import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

import * as cookieParser from 'cookie-parser';
import { ValidationPipe } from '@nestjs/common';
import { IoAdapter } from '@nestjs/platform-socket.io';

import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º cookie-parser
  app.use(cookieParser());

  // ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è DTO (—Å –∞–≤—Ç–æ-–æ—à–∏–±–∫–∞–º–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,           // —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
      forbidNonWhitelisted: true, // –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –ª–∏—à–Ω–∏—Ö –ø–æ–ª—è—Ö
      transform: true,            // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–æ–¥–∏—Ç —Ç–∏–ø—ã
    }),
  );

  // üìÑ Swagger-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  const swaggerConfig = new DocumentBuilder()
    .setTitle('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API —á–∞—Ç–∞')
    .setDescription('REST API + WebSocket —á–∞—Ç–∞')
    .setVersion('1.0')
    .build();

  const swaggerDocument = SwaggerModule.createDocument(app, swaggerConfig);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è WebSocket-—ç–Ω–ø–æ–π–Ω—Ç–∞
  swaggerDocument.paths['/chat'] = {
    get: {
      tags: ['WebSocket'],
      summary: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket-—á–∞—Ç—É',
      description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebSocket-–ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É',
      responses: {
        101: {
          description: 'WebSocket handshake successful',
        },
      },
    },
  };

  // üåê Swagger UI –Ω–∞ /api-docs
  SwaggerModule.setup('api-docs', app, swaggerDocument);

  // üü° –†–∞–∑—Ä–µ—à–∞–µ–º CORS (–ª—É—á—à–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã –Ω–∞ –ø—Ä–æ–¥–µ)
  app.enableCors({
    origin: '*',
    credentials: true,
  });

  // üîå WebSocket –∞–¥–∞–ø—Ç–µ—Ä
  app.useWebSocketAdapter(new IoAdapter(app));

  // üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const port = 3000;
  await app.listen(port);
  console.log(`üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ 3000 –ø–æ—Ä—Ç—É`);
}

bootstrap();
