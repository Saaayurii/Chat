import { Injectable } from '@nestjs/common';
import { UsersSeeder } from './users.seeder';
import { QuestionsSeeder } from './questions.seeder';
import { ComplaintsSeeder } from './complaints.seeder';
import { BlacklistSeeder } from './blacklist.seeder';
import { RatingsSeeder } from './ratings.seeder';
import { ConversationsSeeder } from './conversations.seeder';

@Injectable()
export class MainSeeder {
  constructor(
    private readonly usersSeeder: UsersSeeder,
    private readonly questionsSeeder: QuestionsSeeder,
    private readonly complaintsSeeder: ComplaintsSeeder,
    private readonly blacklistSeeder: BlacklistSeeder,
    private readonly ratingsSeeder: RatingsSeeder,
    private readonly conversationsSeeder: ConversationsSeeder,
  ) {}

  async seedAll() {
    console.log('üöÄ Starting database seeding...\n');
    
    try {
      // –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω - —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ç–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–µ
      await this.usersSeeder.seed();
      console.log('');
      
      await this.questionsSeeder.seed();
      console.log('');
      
      await this.complaintsSeeder.seed();
      console.log('');
      
      await this.blacklistSeeder.seed();
      console.log('');
      
      await this.ratingsSeeder.seed();
      console.log('');
      
      await this.conversationsSeeder.seed();
      console.log('');
      
      console.log('üéâ Database seeding completed successfully!');
      console.log('üìä Summary:');
      console.log('  ‚Ä¢ Users and profiles created');
      console.log('  ‚Ä¢ Questions with various statuses');
      console.log('  ‚Ä¢ Complaints and resolutions');
      console.log('  ‚Ä¢ Blacklist entries with different statuses');
      console.log('  ‚Ä¢ Operator ratings and feedback');
      console.log('  ‚Ä¢ Conversations and messages');
      console.log('\n‚úÖ Your database is now populated with realistic test data!');
      
    } catch (error) {
      console.error('‚ùå Error during database seeding:', error);
      throw error;
    }
  }

  async clearAll() {
    console.log('üßπ Clearing all collections...\n');
    
    try {
      // –û—á–∏—â–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      await this.conversationsSeeder.clear();
      await this.ratingsSeeder.clear();
      await this.blacklistSeeder.clear();
      await this.complaintsSeeder.clear();
      await this.questionsSeeder.clear();
      await this.usersSeeder.clear();
      
      console.log('\n‚úÖ All collections cleared successfully!');
      
    } catch (error) {
      console.error('‚ùå Error during database clearing:', error);
      throw error;
    }
  }

  async reseedAll() {
    console.log('üîÑ Reseeding database (clear and seed)...\n');
    
    try {
      await this.clearAll();
      console.log('');
      await this.seedAll();
      
    } catch (error) {
      console.error('‚ùå Error during database reseeding:', error);
      throw error;
    }
  }
}