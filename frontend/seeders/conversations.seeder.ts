import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Conversation, ConversationDocument, ConversationType, ConversationStatus } from '../schemas/conversation.schema';
import { Message, MessageDocument, MessageType, MessageStatus } from '../schemas/message.schema';
import { User, UserDocument, UserRole } from '../schemas/user.schema';

@Injectable()
export class ConversationsSeeder {
  constructor(
    @InjectModel(Conversation.name) private conversationModel: Model<ConversationDocument>,
    @InjectModel(Message.name) private messageModel: Model<MessageDocument>,
    @InjectModel(User.name) private userModel: Model<UserDocument>,
  ) {}

  async seed() {
    console.log('üå± Seeding conversations and messages...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
    const existingConversationsCount = await this.conversationModel.countDocuments();
    if (existingConversationsCount > 0) {
      console.log('üí¨ Conversations already exist, skipping conversations seeding');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const visitors = await this.userModel.find({ role: UserRole.VISITOR }).limit(10);
    const operators = await this.userModel.find({ role: UserRole.OPERATOR });
    const admins = await this.userModel.find({ role: UserRole.ADMIN });

    if (visitors.length === 0 || operators.length === 0) {
      console.log('‚ö†Ô∏è  No users found, skipping conversations seeding');
      return;
    }

    const conversations: any[] = [];
    const messages: any[] = [];

    // –¢–∏–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    const greetings = [
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –¥–µ–ª–∞?',
      '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú–æ–≥—É –ª–∏ —è –≤–∞–º –ø–æ–º–æ—á—å?',
      '–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å.',
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å.'
    ];

    const techQuestions = [
      '–ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å?',
      '–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤',
      '–°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ',
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π'
    ];

    const operatorResponses = [
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–µ–π—á–∞—Å –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.',
      '–î–∞–≤–∞–π—Ç–µ —Ä–µ—à–∏–º —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É. –ú–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?',
      '–ü–æ–Ω—è–ª –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ...',
      '–ü—Ä–æ–≤–µ—Ä–∏–ª —Å –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.'
    ];

    const solutions = [
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.',
      '–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ —Å –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—Å–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.',
      '–û—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∞ email. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.',
      '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.'
    ];

    const thankYous = [
      '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ! –í—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ!',
      '–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!',
      '–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ.',
      '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –±—ã—Å—Ç—Ä—É—é –ø–æ–º–æ—â—å!'
    ];

    // 1. –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–æ–ø–µ—Ä–∞—Ç–æ—Ä)
    for (let i = 0; i < 5; i++) {
      const visitor = visitors[i % visitors.length];
      const operator = operators[i % operators.length];
      const conversationId = new Date().getTime() + i;

      const conversation = {
        _id: conversationId,
        participants: [visitor._id, operator._id],
        type: ConversationType.USER_OPERATOR,
        status: ConversationStatus.ACTIVE,
        createdBy: visitor._id,
        lastMessage: {
          text: operatorResponses[i % operatorResponses.length],
          senderId: operator._id,
          timestamp: new Date(Date.now() - 300000 + i * 60000), // 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥, —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        },
        unreadMessagesCount: Math.floor(Math.random() * 3),
        unreadByParticipant: new Map([
          [visitor._id.toString(), Math.floor(Math.random() * 2)],
          [operator._id.toString(), 0]
        ]),
        createdAt: new Date(Date.now() - 3600000 + i * 600000), // —á–∞—Å –Ω–∞–∑–∞–¥, —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        updatedAt: new Date(Date.now() - 300000 + i * 60000),
      };

      conversations.push(conversation);

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      const conversationMessages = [
        {
          conversationId,
          senderId: visitor._id,
          text: greetings[i % greetings.length],
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [visitor._id, operator._id],
          readTimestamps: new Map([
            [visitor._id.toString(), new Date(Date.now() - 3600000 + i * 600000)],
            [operator._id.toString(), new Date(Date.now() - 3540000 + i * 600000)]
          ]),
          createdAt: new Date(Date.now() - 3600000 + i * 600000),
        },
        {
          conversationId,
          senderId: visitor._id,
          text: techQuestions[i % techQuestions.length],
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [visitor._id, operator._id],
          readTimestamps: new Map([
            [visitor._id.toString(), new Date(Date.now() - 3540000 + i * 600000)],
            [operator._id.toString(), new Date(Date.now() - 3480000 + i * 600000)]
          ]),
          createdAt: new Date(Date.now() - 3540000 + i * 600000),
        },
        {
          conversationId,
          senderId: operator._id,
          text: operatorResponses[i % operatorResponses.length],
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [visitor._id, operator._id],
          readTimestamps: new Map([
            [operator._id.toString(), new Date(Date.now() - 3480000 + i * 600000)],
            [visitor._id.toString(), new Date(Date.now() - 300000 + i * 60000)]
          ]),
          createdAt: new Date(Date.now() - 300000 + i * 60000),
        }
      ];

      messages.push(...conversationMessages);
    }

    // 2. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
    for (let i = 0; i < 8; i++) {
      const visitor = visitors[i % visitors.length];
      const operator = operators[i % operators.length];
      const conversationId = new Date().getTime() + 1000 + i;

      const conversation = {
        _id: conversationId,
        participants: [visitor._id, operator._id],
        type: ConversationType.USER_OPERATOR,
        status: ConversationStatus.CLOSED,
        createdBy: visitor._id,
        closedAt: new Date(Date.now() - 86400000 + i * 10800000), // –æ—Ç 1 –¥–Ω—è –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        closureReason: '–í–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω',
        lastMessage: {
          text: thankYous[i % thankYous.length],
          senderId: visitor._id,
          timestamp: new Date(Date.now() - 86400000 + i * 10800000),
        },
        unreadMessagesCount: 0,
        unreadByParticipant: new Map([
          [visitor._id.toString(), 0],
          [operator._id.toString(), 0]
        ]),
        createdAt: new Date(Date.now() - 90000000 + i * 10800000), // –æ–∫–æ–ª–æ –¥–Ω—è –Ω–∞–∑–∞–¥
        updatedAt: new Date(Date.now() - 86400000 + i * 10800000),
      };

      conversations.push(conversation);

      // –ü–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      const conversationMessages = [
        {
          conversationId,
          senderId: visitor._id,
          text: greetings[i % greetings.length],
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [visitor._id, operator._id],
          readTimestamps: new Map([
            [visitor._id.toString(), new Date(Date.now() - 90000000 + i * 10800000)],
            [operator._id.toString(), new Date(Date.now() - 89940000 + i * 10800000)]
          ]),
          createdAt: new Date(Date.now() - 90000000 + i * 10800000),
        },
        {
          conversationId,
          senderId: visitor._id,
          text: techQuestions[i % techQuestions.length],
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [visitor._id, operator._id],
          readTimestamps: new Map([
            [visitor._id.toString(), new Date(Date.now() - 89940000 + i * 10800000)],
            [operator._id.toString(), new Date(Date.now() - 89880000 + i * 10800000)]
          ]),
          createdAt: new Date(Date.now() - 89940000 + i * 10800000),
        },
        {
          conversationId,
          senderId: operator._id,
          text: operatorResponses[i % operatorResponses.length],
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [visitor._id, operator._id],
          readTimestamps: new Map([
            [operator._id.toString(), new Date(Date.now() - 89880000 + i * 10800000)],
            [visitor._id.toString(), new Date(Date.now() - 89820000 + i * 10800000)]
          ]),
          createdAt: new Date(Date.now() - 89880000 + i * 10800000),
        },
        {
          conversationId,
          senderId: operator._id,
          text: solutions[i % solutions.length],
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [visitor._id, operator._id],
          readTimestamps: new Map([
            [operator._id.toString(), new Date(Date.now() - 89820000 + i * 10800000)],
            [visitor._id.toString(), new Date(Date.now() - 86460000 + i * 10800000)]
          ]),
          createdAt: new Date(Date.now() - 89820000 + i * 10800000),
        },
        {
          conversationId,
          senderId: visitor._id,
          text: thankYous[i % thankYous.length],
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [visitor._id, operator._id],
          readTimestamps: new Map([
            [visitor._id.toString(), new Date(Date.now() - 86460000 + i * 10800000)],
            [operator._id.toString(), new Date(Date.now() - 86400000 + i * 10800000)]
          ]),
          createdAt: new Date(Date.now() - 86460000 + i * 10800000),
        }
      ];

      messages.push(...conversationMessages);
    }

    // 3. –†–∞–∑–≥–æ–≤–æ—Ä—ã –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    for (let i = 0; i < 3; i++) {
      const operator1 = operators[i % operators.length];
      const operator2 = operators[(i + 1) % operators.length];
      const conversationId = new Date().getTime() + 2000 + i;

      const conversation = {
        _id: conversationId,
        participants: [operator1._id, operator2._id],
        type: ConversationType.OPERATOR_OPERATOR,
        status: ConversationStatus.ACTIVE,
        createdBy: operator1._id,
        title: `–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∫–ª–∏–µ–Ω—Ç—É #${1000 + i}`,
        lastMessage: {
          text: '–ü–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ!',
          senderId: operator1._id,
          timestamp: new Date(Date.now() - 1800000 + i * 300000),
        },
        unreadMessagesCount: 0,
        unreadByParticipant: new Map([
          [operator1._id.toString(), 0],
          [operator2._id.toString(), 0]
        ]),
        createdAt: new Date(Date.now() - 7200000 + i * 1800000),
        updatedAt: new Date(Date.now() - 1800000 + i * 300000),
      };

      conversations.push(conversation);

      const conversationMessages = [
        {
          conversationId,
          senderId: operator1._id,
          text: `–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º? –£ –Ω–µ–≥–æ —Å–ª–æ–∂–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å.`,
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [operator1._id, operator2._id],
          readTimestamps: new Map([
            [operator1._id.toString(), new Date(Date.now() - 7200000 + i * 1800000)],
            [operator2._id.toString(), new Date(Date.now() - 7140000 + i * 1800000)]
          ]),
          createdAt: new Date(Date.now() - 7200000 + i * 1800000),
        },
        {
          conversationId,
          senderId: operator2._id,
          text: '–ö–æ–Ω–µ—á–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?',
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [operator1._id, operator2._id],
          readTimestamps: new Map([
            [operator2._id.toString(), new Date(Date.now() - 7140000 + i * 1800000)],
            [operator1._id.toString(), new Date(Date.now() - 1860000 + i * 300000)]
          ]),
          createdAt: new Date(Date.now() - 7140000 + i * 1800000),
        },
        {
          conversationId,
          senderId: operator1._id,
          text: '–ü–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ!',
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [operator1._id, operator2._id],
          readTimestamps: new Map([
            [operator1._id.toString(), new Date(Date.now() - 1800000 + i * 300000)],
            [operator2._id.toString(), new Date(Date.now() - 1800000 + i * 300000)]
          ]),
          createdAt: new Date(Date.now() - 1800000 + i * 300000),
        }
      ];

      messages.push(...conversationMessages);
    }

    // 4. –†–∞–∑–≥–æ–≤–æ—Ä—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    for (let i = 0; i < 2; i++) {
      const operator = operators[i % operators.length];
      const admin = admins[i % admins.length];
      const conversationId = new Date().getTime() + 3000 + i;

      const conversation = {
        _id: conversationId,
        participants: [operator._id, admin._id],
        type: ConversationType.OPERATOR_ADMIN,
        status: ConversationStatus.ACTIVE,
        createdBy: operator._id,
        title: '–°–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π - —Ç—Ä–µ–±—É–µ—Ç—Å—è —ç—Å–∫–∞–ª–∞—Ü–∏—è',
        lastMessage: {
          text: '–•–æ—Ä–æ—à–æ, –∑–∞–π–º—É—Å—å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.',
          senderId: admin._id,
          timestamp: new Date(Date.now() - 900000 + i * 300000),
        },
        unreadMessagesCount: 0,
        unreadByParticipant: new Map([
          [operator._id.toString(), 0],
          [admin._id.toString(), 0]
        ]),
        createdAt: new Date(Date.now() - 3600000 + i * 900000),
        updatedAt: new Date(Date.now() - 900000 + i * 300000),
      };

      conversations.push(conversation);

      const conversationMessages = [
        {
          conversationId,
          senderId: operator._id,
          text: '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —ç—Å–∫–∞–ª–∞—Ü–∏–µ–π. –ö–ª–∏–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç, –Ω–æ —Å–ª—É—á–∞–π —Å–ø–æ—Ä–Ω—ã–π.',
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [operator._id, admin._id],
          readTimestamps: new Map([
            [operator._id.toString(), new Date(Date.now() - 3600000 + i * 900000)],
            [admin._id.toString(), new Date(Date.now() - 3540000 + i * 900000)]
          ]),
          createdAt: new Date(Date.now() - 3600000 + i * 900000),
        },
        {
          conversationId,
          senderId: admin._id,
          text: '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–µ—Ç–∞–ª–∏ —Å–ª—É—á–∞—è. –†–∞—Å—Å–º–æ—Ç—Ä—é –∏ –¥–∞–º —Ä–µ—à–µ–Ω–∏–µ.',
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [operator._id, admin._id],
          readTimestamps: new Map([
            [admin._id.toString(), new Date(Date.now() - 3540000 + i * 900000)],
            [operator._id.toString(), new Date(Date.now() - 960000 + i * 300000)]
          ]),
          createdAt: new Date(Date.now() - 3540000 + i * 900000),
        },
        {
          conversationId,
          senderId: admin._id,
          text: '–•–æ—Ä–æ—à–æ, –∑–∞–π–º—É—Å—å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.',
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [operator._id, admin._id],
          readTimestamps: new Map([
            [admin._id.toString(), new Date(Date.now() - 900000 + i * 300000)],
            [operator._id.toString(), new Date(Date.now() - 900000 + i * 300000)]
          ]),
          createdAt: new Date(Date.now() - 900000 + i * 300000),
        }
      ];

      messages.push(...conversationMessages);
    }

    // 5. –ê—Ä—Ö–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã (—Å—Ç–∞—Ä—ã–µ)
    for (let i = 0; i < 5; i++) {
      const visitor = visitors[i % visitors.length];
      const operator = operators[i % operators.length];
      const conversationId = new Date().getTime() + 4000 + i;

      const conversation = {
        _id: conversationId,
        participants: [visitor._id, operator._id],
        type: ConversationType.USER_OPERATOR,
        status: ConversationStatus.CLOSED,
        createdBy: visitor._id,
        closedAt: new Date(Date.now() - 604800000 - i * 86400000), // –Ω–µ–¥–µ–ª—è+ –Ω–∞–∑–∞–¥
        archivedAt: new Date(Date.now() - 604800000 - i * 86400000 + 3600000),
        closureReason: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ',
        lastMessage: {
          text: '–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ!',
          senderId: visitor._id,
          timestamp: new Date(Date.now() - 604800000 - i * 86400000),
        },
        unreadMessagesCount: 0,
        unreadByParticipant: new Map([
          [visitor._id.toString(), 0],
          [operator._id.toString(), 0]
        ]),
        createdAt: new Date(Date.now() - 608400000 - i * 86400000),
        updatedAt: new Date(Date.now() - 604800000 - i * 86400000),
      };

      conversations.push(conversation);

      // –ü—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      const conversationMessages = [
        {
          conversationId,
          senderId: visitor._id,
          text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å.',
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [visitor._id, operator._id],
          readTimestamps: new Map([
            [visitor._id.toString(), new Date(Date.now() - 608400000 - i * 86400000)],
            [operator._id.toString(), new Date(Date.now() - 608340000 - i * 86400000)]
          ]),
          createdAt: new Date(Date.now() - 608400000 - i * 86400000),
        },
        {
          conversationId,
          senderId: operator._id,
          text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [visitor._id, operator._id],
          readTimestamps: new Map([
            [operator._id.toString(), new Date(Date.now() - 608340000 - i * 86400000)],
            [visitor._id.toString(), new Date(Date.now() - 604860000 - i * 86400000)]
          ]),
          createdAt: new Date(Date.now() - 608340000 - i * 86400000),
        },
        {
          conversationId,
          senderId: visitor._id,
          text: '–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ!',
          type: MessageType.TEXT,
          status: MessageStatus.DELIVERED,
          readBy: [visitor._id, operator._id],
          readTimestamps: new Map([
            [visitor._id.toString(), new Date(Date.now() - 604800000 - i * 86400000)],
            [operator._id.toString(), new Date(Date.now() - 604800000 - i * 86400000)]
          ]),
          createdAt: new Date(Date.now() - 604800000 - i * 86400000),
        }
      ];

      messages.push(...conversationMessages);
    }

    try {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
      const createdConversations = await this.conversationModel.insertMany(conversations);
      console.log(`‚úÖ Successfully created ${createdConversations.length} conversations`);

      // –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      const createdMessages = await this.messageModel.insertMany(messages);
      console.log(`‚úÖ Successfully created ${createdMessages.length} messages`);

      console.log('\nüìã Conversations statistics:');
      console.log(`  üü¢ Active: ${conversations.filter(c => c.status === ConversationStatus.ACTIVE).length}`);
      console.log(`  üîí Closed: ${conversations.filter(c => c.status === ConversationStatus.CLOSED).length}`);
      console.log(`  üìÅ Closed (Archived): ${conversations.filter(c => c.archivedAt).length}`);

      console.log('\nüìä By type:');
      console.log(`  üë§‚ÜîÔ∏èüë®‚Äçüíº User-Operator: ${conversations.filter(c => c.type === ConversationType.USER_OPERATOR).length}`);
      console.log(`  üë®‚Äçüíº‚ÜîÔ∏èüë®‚Äçüíº Operator-Operator: ${conversations.filter(c => c.type === ConversationType.OPERATOR_OPERATOR).length}`);
      console.log(`  üë®‚Äçüíº‚ÜîÔ∏èüëë Operator-Admin: ${conversations.filter(c => c.type === ConversationType.OPERATOR_ADMIN).length}`);

      console.log(`\nüí¨ Total messages: ${messages.length}`);
      console.log(`üìä Average messages per conversation: ${(messages.length / conversations.length).toFixed(1)}`);

    } catch (error) {
      console.error('‚ùå Error seeding conversations and messages:', error);
      throw error;
    }
  }

  async clear() {
    console.log('üßπ Clearing conversations and messages...');
    await this.messageModel.deleteMany({});
    await this.conversationModel.deleteMany({});
    console.log('‚úÖ Conversations and messages cleared');
  }
}